<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boxguy_breathing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Velocity and Movement Settings

image_speed = .15;

/*
 * Player Velocity is the velocity of the playable character which is 
 * brought about by the exhersion of the player itself.
 */
player_horizontal_velocity = 0;
player_vertical_velocity = 0;

/*
 * Maximum player velocities indicate the maximum velocity a player can 
 * reach under their own exhersion
 */
player_maximum_horizontal_velocity = 5;

/*
 * Actual velocities represent the velocity used to apply movement each round
 */
actual_horizontal_velocity = 0;
actual_vertical_velocity = 0;

/*
 * Gravitational Effect is the force which gravity exherts on the player - specifically
 * this indicates how quickly the character accelerates while falling
 */
gravitational_effect = 0.8;

/*
 * Movement Force is the force which a character is able to exhert when attempting to 
 * move in a direction.
 */
movement_force = 5;
jump_force = 12;

/*
 * Intended direction indicates the direction in which the player character is intending 
 * to move.  
 *
 * For Horizontal Intention
 *   * 1 : Right
 *   * -1 : Left
 */
intended_horizontal_direction = 1;

/*
 * Indicates whether the character is currently standing on the ground
 */
on_ground = false;

/*
 * Indicates whether we are in the middle of a wall grab and which direction we are 
 * grabbing in.  
 *
 *   * 1 : Wall is to the right
 *   * -1 : Wall is to the left
 */
wall_grab = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision Detection

right_key = keyboard_check( vk_right );
left_key = keyboard_check( vk_left );
space_key = keyboard_check_pressed( vk_space );

intended_horizontal_direction = right_key - left_key;

var current_ground_object = instance_place( x, y + 1, obj_wall );
var current_horizontal_start_friction = 1;
var current_horizontal_stop_friction = 0;

var new_player_horizontal_velocity = 0;

/*
 * Check to see if we are on the ground.  If we are, get the friction defined for 
 * this ground type.  
 * 
 * To avoid performing this check twice, while we are in this block we check to see 
 * if a jump is occurring 
 */
if ( current_ground_object != noone ) {
    on_ground = true;
    current_horizontal_start_friction = current_ground_object.start_friction;
    current_horizontal_stop_friction = current_ground_object.stop_friction;
    
    if ( space_key ) {
        actual_vertical_velocity = jump_force * -1;
    }
}
else {
    on_ground = false;
}

/*
 * Application of Player Force to current horizontal velocity
 */
if ( intended_horizontal_direction != 0 ) {

    new_player_horizontal_velocity = 
        ( intended_horizontal_direction * 
        movement_force * 
        current_horizontal_start_friction ) + 
        player_horizontal_velocity;
         
}
else {

    //release the wall grab if we had one
    wall_grab = 0;

    new_player_horizontal_abs_velocity = 
        abs( player_horizontal_velocity ) - 
        movement_force * current_horizontal_stop_friction;
        
    if ( new_player_horizontal_abs_velocity &lt; 0 ) {
        new_player_horizontal_abs_velocity = 0;    
    }
    
    new_player_horizontal_velocity = new_player_horizontal_abs_velocity * sign( player_horizontal_velocity );
    
}

if ( abs( new_player_horizontal_velocity ) &gt; player_maximum_horizontal_velocity ) {

    new_player_horizontal_velocity = player_maximum_horizontal_velocity * sign( new_player_horizontal_velocity );
        
}

player_horizontal_velocity = new_player_horizontal_velocity;

/* 
 * Application of External Force to current horizontal velocity
 *
 * TODO: This
 */

/*
 * Handle wall jump
 */
if ( !on_ground &amp;&amp; space_key ) {

    //Release a wall grab if we have one
    wall_grab = 0;

    if ( place_meeting( x + 6, y, obj_wall ) ) {
        player_horizontal_velocity = jump_force * -1;
        actual_vertical_velocity = jump_force * -1;
    }
    else if ( place_meeting( x - 6, y, obj_wall ) ) {
        player_horizontal_velocity = jump_force;
        actual_vertical_velocity = jump_force * -1;
    }
    
} 
 
actual_horizontal_velocity = player_horizontal_velocity;

/*
 * Application of External Force to current vertical velocity
 *
 * TODO: This
 */
 
if ( wall_grab == 0 ) {

    //Make sure fall velocity does not get out of control
    if ( actual_vertical_velocity &lt; 16 ) {

        actual_vertical_velocity += gravitational_effect;
        
    }
}
else {
    actual_vertical_velocity = 3;
}


/*
 * Deal with Collisions
 */
 
/*
 * Check to see if we are about to run into a wall from the left 
 * or the right.  If we are, slowly inch our way towards the wall
 */
if ( place_meeting( x + actual_horizontal_velocity, y, obj_wall ) ) {
    
    while ( !place_meeting( x + sign( actual_horizontal_velocity ), y, obj_wall ) ) {
        x += sign( actual_horizontal_velocity );
    }

    //Wall grab
    if ( sign( intended_horizontal_direction ) == sign( actual_horizontal_velocity ) ) {
        wall_grab = intended_horizontal_direction;
    }
    
    actual_horizontal_velocity = 0;
    player_horizontal_velocity = 0;
    
}

x += actual_horizontal_velocity;

/*
 * Check to see if we are about to run into a wall from above or below.  
 * If we are, slowly inch our way towards the wall
 */
if ( place_meeting( x, y + actual_vertical_velocity, obj_wall ) ) {

    while ( !place_meeting( x, y + sign( actual_vertical_velocity ), obj_wall ) ) {
        y += sign( actual_vertical_velocity );
    }
    
    actual_vertical_velocity = 0;
    
}

y += actual_vertical_velocity;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Management
if ( on_ground ) {
    if ( sprite_index != spr_boxguy_breathing ) {
        sprite_index = spr_boxguy_breathing;
    }
}

else if ( actual_vertical_velocity &lt; 0 ) {
    if ( sprite_index != spr_boxguy_jumping2 ) {
        sprite_index = spr_boxguy_jumping2;
    }
}
else if ( actual_vertical_velocity &gt;= 0 ) {
    if ( sprite_index != spr_boxguy_falling ) {
        sprite_index = spr_boxguy_falling;
    }
}

if ( intended_horizontal_direction &gt; 0 ) {
    image_xscale = 1;
}
else if ( intended_horizontal_direction &lt; 0 ) {
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Fell Into Pit Situations
if ( y &gt; room_height + 50 ) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>80,160</point>
    <point>80,80</point>
  </PhysicsShapePoints>
</object>
