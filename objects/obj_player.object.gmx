<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boxguy_breathing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Velocity and Movement Settings

image_speed = .15;

vertical_velocity = 0;
horizontal_velocity = 0;
gravitational_effect = 0.6;

jump_speed = 9;
move_speed = 5;

on_ground = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision Detection

right_key = keyboard_check( vk_right );
left_key = keyboard_check( vk_left );
space_key = keyboard_check_pressed( vk_space );

on_ground = 0;

/*
 * The result of keyboard_check is 0 or 1.  The following line 
 * establishes a movement variable such that 1 represents movement 
 * to the right and -1 represents movement to the left.
 */
movement = right_key - left_key;

horizontal_velocity = move_speed * movement;

if ( vertical_velocity &lt; 10 ) {
    vertical_velocity += gravitational_effect;
}

if ( place_meeting( x, y + 1, obj_wall ) ) {
    if ( space_key ) {
        vertical_velocity = jump_speed * -1;
    }
    else {
        on_ground = 1;
    }
}

/*
 * Check to see if we are about to run into a wall from the left 
 * or the right.  If we are, slowly inch our way towards the wall
 */
if ( place_meeting( x + horizontal_velocity, y, obj_wall ) ) {

    while ( !place_meeting( x + sign( horizontal_velocity ), y, obj_wall ) ) {
        x += sign( horizontal_velocity );
    }
    
    horizontal_velocity = 0;
    
}

x += horizontal_velocity;

/*
 * Check to see if we are about to run into a wall from above or below.  
 * If we are, slowly inch our way towards the wall
 */
if ( place_meeting( x, y + vertical_velocity, obj_wall ) ) {

    while ( !place_meeting( x, y + sign( vertical_velocity ), obj_wall ) ) {
        y += sign( vertical_velocity );
    }
    
    vertical_velocity = 0;
    
}

y += vertical_velocity;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Management
if ( on_ground ) {
    if ( sprite_index != spr_boxguy_breathing ) {
        sprite_index = spr_boxguy_breathing;
    }
}
else if ( vertical_velocity &lt; 0 ) {
    if ( sprite_index != spr_boxguy_jumping ) {
        sprite_index = spr_boxguy_jumping;
    }
}
else if ( vertical_velocity &gt;= 0 ) {
    if ( sprite_index != spr_boxguy_falling ) {
        sprite_index = spr_boxguy_falling;
    }
}

if ( horizontal_velocity &gt; 0 ) {
    image_xscale = 1;
}
else if ( horizontal_velocity &lt; 0 ) {
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Fell Into Pit Situations
if ( y &gt; room_height + 50 ) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>80,160</point>
    <point>80,80</point>
  </PhysicsShapePoints>
</object>
